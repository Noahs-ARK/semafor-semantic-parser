    SEMAFOR (a frame-semantic parser for English)
    Copyright (C) 2011
    Dipanjan Das, Nathan Schneider, Desai Chen, & Noah A. Smith
    Language Technologies Institute, Carnegie Mellon University
    http://www.ark.cs.cmu.edu/SEMAFOR

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.



This is a README for SEMAFOR v2.0
=================================

SEMAFOR: Semantic Analysis of Frame Representations is a tool for automatic analysis of the frame-semantic structure of English text.

FrameNet (http://framenet.icsi.berkeley.edu) is a lexical resource that groups predicates in a hierarchy of structured concepts, known as *frames*. Each frame in the lexicon in turn defines several named *roles* corresponding to aspects of that concept (e.g. participants in an event).

This tool attempts to find which words in text evoke which semantic frames, and to find and label each frame's *arguments*--portions of the sentence that fill a role associated with the frame. It takes as input a file with English sentences, one per line, and performs the following steps:

  0. Preprocessing
     The sentences are lemmatized, part-of-speech tagged, and syntactically parsed.

  1. Target identification
     Frame-evoking words and phrases ("targets") are heuristically identified in each sentence.

  2. Frame identification
     A log-linear model, trained on SemEval 2007 task data with full-text frame annotations, produces for each target a probability distribution over frames in the FrameNet lexicon. The target is then labeled with the highest-scoring frame.

  3. Argument identification
     A second log-linear model, trained on the same data, considers every role of each labeled frame instance and identifies a span of words in the sentence--or NULL--as filling that role. A subsequent step ensures that none of a frame's overt arguments overlap.

  4. Output
     An XML file is produced containing the text of the input sentences, augmented with the frame-semantic information (target-frame and argument-role pairings) predicted by the system. See the papers listed below ("Further Reading") for algorithmic details and experimental evaluation of the components of this system.

What follows is an overview of the organization of SEMAFOR's directory structure, and how it can be installed and run on new data.


1. Requirements
===============
Running the SEMAFOR tool *requires* Java 1.6. It should run on any platform (Windows, Unix, or Mac OS).


2. Contents
===========
This gzipped package contains a folder called SEMAFOR-1.0.1, which we 
will refer to as the "root" folder. Underneath it, there are the following 
files and folders:

dict/
    WordNet data files. License information can be viewed at: 
    http://wordnet.princeton.edu/wordnet/license/

edu/ 

riso/
    Source files of the SEMAFOR project.

lib/
    Java libraries required for this project, as detailed below.

scripts/
    Executables required for preprocessing raw text.

release/
    Installation and execution code.

file_properties.xml
    File containing WordNet lookup paths.

LICENSE
    Text of the GNU General Public License, Version 3.

README
    This file.


2.1. Included Libraries
=======================
The lib/ directory contains the following library:

semafor-deps.jar: It contains all the required libraries that SEMAFOR needs to run.


3. Installation
===============
In preprocessing, SEMAFOR uses the MST Parser, a syntactic dependency parser created by Ryan McDonald. Download and unpack the following packaged version: http://www.ark.cs.cmu.edu/MSTParserStacked/stackedParser.tgz

Let us assume that SEMAFOR has been unzipped to the root folder /home/SEMAFOR-1.0, and stackedParser.tgz has been unzipped to /home/MSTParserStacked. Assume that your Java home directory is /home/jdk/bin.

Thus, let's assume we initialize the following environment variables:
SEMAFOR_PATH=/home/SEMAFOR-1.0
MST_PARSER=/home/MSTParserStacked
JAVA_HOME=/home/jdk/bin


Run the following commands to compile the software:

$ cd $SEMAFOR_PATH
$ cd release
$ ./cleanAndCompile.sh $JAVA_HOME $SEMAFOR_PATH $MST_PARSER

The last step is optional because the class files are included in this package, 
but you would still need to compile MSTParserStacked by:

$ cd $MST_PARSER
$ $JAVA_HOME/javac -cp ".:./lib/trove.jar:./lib/mallet.jar:./lib/mallet-deps.jar" mst/DependencyParser.java


4. Running the Frame-Semantic Parser
====================================

Run the following commands to execute SEMAFOR.

$ cd $SEMAFOR_PATH/release
$ ./runFNParser.sh $SEMAFOR_PATH \
  $SEMAFOR_PATH/temp \
  <input-file-with-one-sentence-per-line> \
  <output-xml> \
  $MST_PARSER \
  $JAVA_HOME

Here, <input-file-with-one-sentence-per-line> is a sentence split file and <output-xml> is an output XML file.
Currently, SEMAFOR requires 8GB of RAM to execute because of its dependence on the MST parser,
which loads a large model trained on the English Penn Treebank.


5. Further Reading
==================
If this parser is used, please cite the following paper:
Probabilistic Frame-Semantic Parsing
Dipanjan Das, Nathan Schneider, Desai Chen, and Noah A. Smith
Proceedings of NAACL-HLT 2010

For further information, please read:
SEMAFOR 1.0: A Probabilistic Frame-Semantic Parser
Dipanjan Das, Nathan Schneider, Desai Chen, and Noah A. Smith
CMU Technical Report, CMU-LTI-10-001


6. Contact
==========
If you find any bugs or have questions, please email Dipanjan Das (dipanjan@cs.cmu.edu) or Nathan Schneider (nschneid@cs.cmu.edu).


7. Version History
==================
1.0 - First public release (2010-04-26)
1.0.1 - Second public release (2010-09-02)
     Now includes compiled Java .class files for SEMAFOR, so compiling from source is 
     not necessary.
     
     Now includes the SemEval 2007 Task 19 dataset and evaluation resources (see
     README.txt in the SemEval2007/ directory for details).
     
     Bug fixes: 
     1) Fixed an issue of tokenization with 'sed'. Now uses 'sed -f' explicitly
        instead of running the script as an executable.
     2) Included 'mkdir tmp' in the MST parser root directory. This is necessary 
        for running the MST parser.
     3) At the top of the 'mxpost' script that does POS tagging, changed '#!/bin/ksh'
        to '#!/bin/bash' because the former did not run in some machines.